{"version":3,"sources":["logo.svg","WebBle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","log","message","console","onReady","a","filters","push","namePrefix","options","results","stopScan","scan","stop","active","JSON","stringify","navigator","bluetooth","requestLEScan","acceptAllAdvertisements","keepRepeatedDevices","addEventListener","event","device","name","id","rssi","txPower","uuids","setTimeout","WebBle","props","useState","tags","setTags","className","data-testid","onClick","onButtonClick","length","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,kC,kNCY3C,SAASC,EAAIC,GACXC,QAAQF,IAAIC,G,4CAYd,WAA6BE,GAA7B,uBAAAC,EAAA,4DAG2B,SAFnBC,EAAU,IAGRC,KAAK,CAACC,WADW,WAGnBC,EAAU,IACRH,QAAUA,EACZI,EAAU,GARlB,SAgCaC,EAAT,WACEV,EAAI,oBACJW,EAAKC,OACLZ,EAAI,2BAA6BW,EAAKE,QACtCV,EAAQM,IAzBVT,EAAI,2CAA6Cc,KAAKC,UAAUP,IAXpE,UAYuBQ,UAAUC,UAAUC,cAAcV,GAZzD,QAYUG,EAZV,OAcIX,EAAI,sBACJA,EAAI,6BAA+BW,EAAKQ,yBACxCnB,EAAI,YAAcW,EAAKE,QACvBb,EAAI,yBAA2BW,EAAKS,qBACpCpB,EAAI,aAAec,KAAKC,UAAUJ,EAAKN,UAEvCW,UAAUC,UAAUI,iBAAiB,yBAAyB,SAACC,GAC7DtB,EAAI,2BACJA,EAAI,kBAAoBsB,EAAMC,OAAOC,MACrCxB,EAAI,gBAAkBsB,EAAMC,OAAOE,IACnCzB,EAAI,WAAasB,EAAMI,MACvB1B,EAAI,eAAiBsB,EAAMK,SAC3B3B,EAAI,YAAcsB,EAAMM,OACxBnB,EAAQH,KAAKgB,MAGfO,WAAWnB,EAAU,KA9BzB,kDAuCIV,EAAI,eAvCR,2D,sBAmEe8B,MAlBf,SAAgBC,GAAO,MAEGC,mBAAS,IAFZ,mBAEdC,EAFc,KAERC,EAFQ,KAIrB,OACE,yBAAKC,UAAU,OAAOC,cAAaL,EAAM,gBACvC,4BAAQN,GAAG,cAAcY,QAAS,kB,2CAAMC,CAAcJ,KAAtD,sBAGA,oCAAUD,EAAKM,OAAf,gBC1DSC,MAXf,WACE,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,aAAaC,cAAY,cACzC,yBAAKK,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzC,kBAAC,EAAD,CAAQP,cAAY,cCIRQ,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCvBRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0JtB,kBAAmBrC,WACrBA,UAAUsC,cAAcC,MACnBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN1D,QAAQ0D,MAAMA,EAAM3D,c","file":"static/js/main.ffd0f19d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\n * @file WebBle Web Bluetooth Scan for nearby RuuviTags\n * @author CRE template\n */\nimport React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @brief Log event in program.\n *\n * @param {string} message Message to log.\n */\nfunction log(message) {\n  console.log(message);\n}\n\n/**\n * @brief Start scanning for devices which advertise name with prefix \"Ruuvi\"\n *\n * Scans for 10 seconds for nearby RuuviDevices. Passes array of matches to\n * given callback function.\n *\n * @param {function} onReady Gets called with array of LEScan events after\n *                           timeout.\n */\nasync function onButtonClick(onReady) {\n  const filters = [];\n\n  const filterNamePrefix = 'Ruuvi';\n  filters.push({namePrefix: filterNamePrefix});\n\n  const options = {};\n  options.filters = filters;\n  const results = [];\n\n  try {\n    log('Requesting Bluetooth Scan with options: ' + JSON.stringify(options));\n    const scan = await navigator.bluetooth.requestLEScan(options);\n\n    log('Scan started with:');\n    log(' acceptAllAdvertisements: ' + scan.acceptAllAdvertisements);\n    log(' active: ' + scan.active);\n    log(' keepRepeatedDevices: ' + scan.keepRepeatedDevices);\n    log(' filters: ' + JSON.stringify(scan.filters));\n\n    navigator.bluetooth.addEventListener('advertisementreceived', (event) => {\n      log('Advertisement received.');\n      log('  Device Name: ' + event.device.name);\n      log('  Device ID: ' + event.device.id);\n      log('  RSSI: ' + event.rssi);\n      log('  TX Power: ' + event.txPower);\n      log('  UUIDs: ' + event.uuids);\n      results.push(event);\n    });\n\n    setTimeout(stopScan, 10000);\n    /** @brief Stop BLE scanning and call teh callback with array of results. */\n    function stopScan() {\n      log('Stopping scan...');\n      scan.stop();\n      log('Stopped.  scan.active = ' + scan.active);\n      onReady(results);\n    }\n  } catch (error) {\n    log('Argh! ' + error);\n  }\n}\n\n/**\n * @brief Scan for nearby RuuviTags\n *\n * @param {object} props Properties containing data-testid string.\n * @return {string} HTML list of nearby RuuviTag mac addresses\n */\nfunction WebBle(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [tags, setTags] = useState([]);\n\n  return (\n    <div className=\"Scan\" data-testid={props['data-testid']}>\n      <button id=\"button-scan\" onClick={() => onButtonClick(setTags)}>\n        Scan for RuuviTags\n      </button>\n      <p>Found {tags.length} RuuviTags</p>\n    </div>\n  );\n}\n\nWebBle.propTypes = {\n  'data-testid': PropTypes.string,\n};\n\nexport default WebBle;\n","/**\n * @file App mainpage\n * @author CRE template\n */\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WebBle from './WebBle';\n\n/**\n * @brief Application entry point.\n *\n * @return {string} HTML of the app.\n */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" data-testid=\"app-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <WebBle data-testid=\"webble\"/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/**\n * @file Serviceworker support\n * @author CRE template\n *\n *\n * This optional code is used to register a service worker.\n * register() is not called by default.\n *\n *  This lets the app load faster on subsequent visits in production, and gives\n *  it offline capabilities. However, it also means that developers (and users)\n *  will only see deployed updates on subsequent visits to a page, after all the\n *  existing tabs open on the page have been closed, since previously cached\n *  resources are updated in the background.\n *\n *  To learn more about the benefits of this model and instructions on how to\n * opt-in, read https://bit.ly/CRA-PWA\n */\n\n/**\n * @brief Check if page is running on localhost\n *\n * @returns {boolean} true if running on localhost, false otherwise\n */\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\n/**\n * @brief Try to register serviceworker for page.\n *\n * @param {object} config Configuration of SW.\n */\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * @brief Register a serviceworker for page.\n *\n * @param {string} swUrl  URL of SW.\n * @param {object} config Configuration of SW.\n */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\n/**\n * @brief Check if there is a valid serviceworker\n *        for the page and register it if yes.\n *\n * @param {string} swUrl  URL of SW.\n * @param {object} config Configuration of SW.\n */\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n\n/**\n * @brief Unregister serviceworker, i.e. load all resources over the Internet.\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}